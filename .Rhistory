x <- matrix()
x <- matrix(1:9,3,3)
x
x <- matrix(1:10,5,2)
x
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(1:9)
View(makeCacheMatrix)
m
set
get
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
matrix(1:9)
matrix(1:9,3,3)
samplem <- matrix(1:9,3,3)
samplem
solve(samplem)
samplem <- matrix(1:8,2,4)
samplem
solve(samplem)
samplem <- matrix(1:25,5,5)
samplem
r.norm(25)
rnorm(25)
rnorm(25,1:10)
?rnorm
rnorm(1)
rnorm(25,1)
rnorm(25,interger = TRUE)
rnorm(25)
matrix(rnorm(25),5,5)
samplem <- matrix(rnorm(25),5,5)
samplem
solve(samplem)
samplem
solve(samplem)
samplem2 <- matrix (2:26,5,5)
samplem2
solve(samplem2)
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(samplem)
cacheSolve(samplem)
m
cacheSolve(1:4)
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
m
m <- NULL
get <- function() x
set <- function(y)
x <<-y;m<<- NULL
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse=getinverse)
makeCacheMatrix(x)
cacheSol(1:9)
cacheSolve(1:9)
x
x$getinverse()
getinverse
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(rnorm(1:9))
View(makeCacheMatrix)
source('~/.active-rstudio-document', echo=TRUE)
makeVector(1:5)
source('~/.active-rstudio-document', echo=TRUE)
makeVetor(1:5)
makeVector(1:5)
source('~/.active-rstudio-document', echo=TRUE)
cachemean(1:5)
set(7)
source('~/Documents/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R')
